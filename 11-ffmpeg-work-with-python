11 ffmpeg批量压缩

有时候需要大量压制视频,虽然可以使用windows的shell工具,但是使用python进行操作,可扩展性会更好,也会更方便,便于模块化.比如和小丸子工具箱结合使用.
废话不多说,直接上代码

#-*- coding:utf-8*-
import os
import subprocess
def convertMM(inPath,fileTypes,startTime='0',reslution='960*540',crf='18',codeMode='hevc'):
    inPath=inPath.decode('utf-8')
    for item in os.walk(inPath):
        print '-------------------'
        print item[0]
        for items in item[2]:
            filePath='\\'.join((item[0],items)).replace('\\','/')
            if filePath.endswith('.torrent'):
                os.remove(filePath)
            for movetype in fileTypes:
                if filePath.endswith(movetype):
                    fileOutPath=filePath.replace(movetype,'_bxx.mp4')
                    print 'file start %s' %filePath
                    aaaa= ('c:/ffmpeg.exe -i "%s" -ss %s -s %s -crf %s -c:v %s -y "%s"'%(filePath,startTime,reslution,crf,codeMode,fileOutPath)).encode('gbk')
                    pps=os.popen(aaaa).read()
                    print 'file finished %s' %fileOutPath
convertMM(r'C:\ptest',['.avi','.mp4','wmv'],'0','960*540',18,'hevc')

看起来也不难理解,每个参数的名称都能直观的看到他的意义.
另外我还发现一个问题, 就是ffmpeg在切分视频的时候,切分结果会有卡顿,不知道是不是编码的问题,比如-ss 1000的时候,压制出来的视频刚播放的时候会卡顿5秒,而源视频并不会.
同一个视频使用小丸子工具箱附带的x264进行拆分则不会有卡顿.同样试过用mpeg的x265进行压缩,结果一样.说明应该和原视频的转码有关系.期待和深入研究过的朋友进一步交流
